/*
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
*/

import java.lang.Math;

class Solution {
    public int reverse(int x) {
        int rem=0,sum=0;
        if(x >= Integer.MAX_VALUE || x <= (-1)*(Integer.MAX_VALUE)){
            return 0;
        }
        while(x!=0){
            rem = x%10;
            if(x<=9){
                if(sum<999999999 && sum> Integer.MAX_VALUE/10 ){
                    return 0;
                }else if(sum> -999999999 && sum< (-1)*(Integer.MAX_VALUE/10)){
                    return 0;
                }
            }
            sum= sum*10+rem;
            x=x/10;
        }
        return sum;
    }
}
